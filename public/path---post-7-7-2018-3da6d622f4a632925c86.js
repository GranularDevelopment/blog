webpackJsonp([0xae7096317067],{522:function(n,s){n.exports={data:{site:{siteMetadata:{title:"Granular Development Blog",author:"Brian Smith"}},markdownRemark:{id:"/Users/briansmith/Documents/Dev/granular-blog/src/pages/post-7-7-2018/index.md absPath of file >>> MarkdownRemark",html:'<p>The RelayCommand is a fairly simply and succesul way to decouple an event from its handler. The problem we are trying\nto avoid is the tight coupling of a UI element that is declared in XAML with the attached method in the code-behind.</p>\n<p>Here is an example:</p>\n<div class="gatsby-highlight">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Xaml <span class="token operator">!</span><span class="token operator">--</span><span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token class-name">Button</span> x<span class="token punctuation">:</span>Name<span class="token operator">=</span><span class="token string">"PressMeButton"</span>\n        Text<span class="token operator">=</span><span class="token string">"Press Me!"</span>\n        Pressed<span class="token operator">=</span><span class="token string">"PressMeButton_Pressed"</span>\n        Clicked<span class="token operator">=</span><span class="token string">"PressMeButton_Clicked"</span><span class="token operator">/</span><span class="token operator">></span>\n\n\n<span class="token comment">// Code-Behind</span>\n\n<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">PressMeButton_Pressed</span><span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n   <span class="token punctuation">(</span>sender <span class="token keyword">as</span> Button<span class="token punctuation">)</span><span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"You pressed me!"</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">PressMeButton_Clicked</span><span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> <span class="token class-name">EventArgs</span> e<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n   <span class="token punctuation">(</span>sender <span class="token keyword">as</span> Button<span class="token punctuation">)</span><span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"I was just clicked!"</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Using a command will allow you to bind a UI element using XAML data-binding. This ensures\nthe commponents are loosely coupled and avoids the risk of creating a memory leak.</p>\n<h3>What’s a Command?</h3>\n<p>Commands are an implementation of the ICommand interface. The ICommand interface has three methods:</p>\n<p>CanExecute(Object)\nDefines the method that determines whether the command can execute in its current state.\nIf the return value is true, the command can be executed. When used with XAML, the\ncommand will be automatically be disabled if CanExecute returns false.  </p>\n<p>Execute(Object)\nDefines the method to be called when the command is invoked. This method is called when the command is\nfired.</p>\n<p>CanExecuteChanged\nOccurs when changes occur that affect whether or not the command should execute. In XAML, the instance of ICommand is bound through the control’s Command property via it’s data-binding. Raising the CanExecuteChanged event willinvoke the CanExecute method, and the control will be enabled or disabled.</p>\n<h3>Here is an example</h3>\n<div class="gatsby-highlight">\n      <pre class="language-csharp"><code class="language-csharp"> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RelayCommand</span> <span class="token punctuation">:</span> <span class="token class-name">ICommand</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">Action</span> _execute<span class="token punctuation">;</span>\n        <span class="token keyword">private</span> <span class="token keyword">readonly</span> Func<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> _canExecute<span class="token punctuation">;</span>\n\n        <span class="token keyword">public</span> <span class="token keyword">event</span> <span class="token class-name">EventHandler</span> CanExecuteChanged<span class="token punctuation">;</span>\n        <span class="token keyword">public</span> <span class="token function">RelayCommand</span><span class="token punctuation">(</span><span class="token class-name">Action</span> execute<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span>execute<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>\n\n        <span class="token keyword">public</span> <span class="token function">RelayCommand</span><span class="token punctuation">(</span><span class="token class-name">Action</span> execute<span class="token punctuation">,</span> Func<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> canExecute<span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>_execute <span class="token operator">=</span> execute <span class="token operator">?</span><span class="token operator">?</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token string">"execute"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>_canExecute <span class="token operator">=</span> canExecute<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">public</span> <span class="token keyword">bool</span> <span class="token function">CanExecute</span><span class="token punctuation">(</span><span class="token keyword">object</span> parameter<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> _canExecute <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">_canExecute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Execute</span><span class="token punctuation">(</span><span class="token keyword">object</span> parameter<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">_execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">OnCanExecuteChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> CanExecuteChanged<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> EventArgs<span class="token punctuation">.</span>Empty<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RelayCommand</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">:</span> ICommand\n    <span class="token punctuation">{</span>\n        <span class="token keyword">private</span> <span class="token keyword">readonly</span> Action<span class="token operator">&lt;</span>T<span class="token operator">></span> _execute<span class="token punctuation">;</span>\n        <span class="token keyword">private</span> <span class="token keyword">readonly</span> Func<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span> _canExecute<span class="token punctuation">;</span>\n\n        <span class="token keyword">public</span> <span class="token keyword">event</span> <span class="token class-name">EventHandler</span> CanExecuteChanged<span class="token punctuation">;</span>\n        <span class="token keyword">public</span> <span class="token function">RelayCommand</span><span class="token punctuation">(</span>Action<span class="token operator">&lt;</span>T<span class="token operator">></span> execute<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span>execute<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>\n\n        <span class="token keyword">public</span> <span class="token function">RelayCommand</span><span class="token punctuation">(</span>Action<span class="token operator">&lt;</span>T<span class="token operator">></span> execute<span class="token punctuation">,</span> Func<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span> canExecute<span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>_execute <span class="token operator">=</span> execute <span class="token operator">?</span><span class="token operator">?</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token string">"execute"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>_canExecute <span class="token operator">=</span> canExecute<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">public</span> <span class="token keyword">bool</span> <span class="token function">CanExecute</span><span class="token punctuation">(</span><span class="token keyword">object</span> parameter<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> _canExecute <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">_canExecute</span><span class="token punctuation">(</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span>parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Execute</span><span class="token punctuation">(</span><span class="token keyword">object</span> parameter<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">_execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span>parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">OnCanExecuteChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> CanExecuteChanged<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> EventArgs<span class="token punctuation">.</span>Empty<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span></code></pre>\n      </div>\n<h3>Non Asynchronous Command</h3>\n<h4>XAML</h4>\n<div class="gatsby-highlight">\n      <pre class="language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ContentPage.ToolbarItems</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ToolbarItem</span> <span class="token attr-name">Command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{Binding MenuSelectedCommand}<span class="token punctuation">"</span></span> <span class="token attr-name">Text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Menu<span class="token punctuation">"</span></span> <span class="token attr-name">Icon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ic_action_menu.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>\n <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ContentPage.ToolbarItems</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<h4>Code Behind</h4>\n<div class="gatsby-highlight">\n      <pre class="language-csharp"><code class="language-csharp"> MenuSelectedCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RelayCommand</span><span class="token punctuation">(</span>MenuSelected<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h3>Asynchronous Command</h3>\n<h4>XAML</h4>\n<div class="gatsby-highlight">\n      <pre class="language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Image</span> <span class="token attr-name">HorizontalOptions</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Center<span class="token punctuation">"</span></span> <span class="token attr-name">WidthRequest</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span> <span class="token attr-name">HeightRequest</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span> <span class="token attr-name">Source</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{Binding UploadImageSource}<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Image.GestureRecognizers</span><span class="token punctuation">></span></span>\n               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TapGestureRecognizer</span> <span class="token attr-name">Command</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{Binding StartUploadCommand}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Image.GestureRecognizers</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Image</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<h4>Code Behind</h4>\n<div class="gatsby-highlight">\n      <pre class="language-csharp"><code class="language-csharp">StartUploadCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RelayCommand</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token keyword">await</span> <span class="token function">StartUploadAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h3>Conclusion</h3>\n<p>In conclusion using commands encourages a clean workflow when developing. The UI can be modified with different\ncontrols without having to change the command in the view model.</p>',frontmatter:{title:"Relay Commands",date:"July 07, 2018"}}},pathContext:{slug:"/post-7-7-2018/",previous:{fields:{slug:"/post-6-25-2018/"},frontmatter:{title:"Jenkins and Python"}},next:{fields:{slug:"/post-11-14-2018/"},frontmatter:{title:"Xamarin Forms Query Android Contacts' Company"}}}}}});
//# sourceMappingURL=path---post-7-7-2018-3da6d622f4a632925c86.js.map